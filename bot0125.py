import os
import logging
import json
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from flask import Flask, request
from telegram import Update,InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)
from dotenv import load_dotenv

load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–ø–∏—Å–æ–∫ ID –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
subscribers = []

# –ü–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–º–µ–Ω—é
ADMIN_PASSWORD = os.getenv('ADMIN_PASSWORD')
email = os.getenv('EMAIL')
password = os.getenv('EMAIL_PASSWORD')  # –ü–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –æ—Ç Google
recipient = email  # Email –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
TOKEN = os.getenv('TELEGRAM_TOKEN')
WEBHOOK_URL = f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}/webhook"
recipient = email  # Email –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–º JSON
def load_subscribers():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞."""
    global subscribers
    try:
        with open("subscribers.json", "r") as file:
            subscribers = json.load(file)
            logger.info("–°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω.")
    except FileNotFoundError:
        subscribers = []
        logger.info("–§–∞–π–ª subscribers.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞—ë—Ç—Å—è –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {e}")
        subscribers = []


def save_subscribers():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ —Ñ–∞–π–ª."""
    try:
        with open("subscribers.json", "w") as file:
            json.dump(subscribers, file)
            logger.info("–°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {e}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def send_notifications(context: ContextTypes.DEFAULT_TYPE, message: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º."""
    logger.info(f"–°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {subscribers}")
    for user_id in subscribers:
        try:
            await context.bot.send_message(chat_id=user_id, text=message)
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å–µ–º (—Ñ–∏–∫—Ç–∏–≤–Ω–∞—è)
def send_email(subject: str, body: str):
    # def send_email(email, subject, body):
    logger.info(f"Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {email} —Å —Ç–µ–º–æ–π '{subject}' –∏ —Ç–µ–∫—Å—Ç–æ–º:\n{body}")
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message = MIMEMultipart()
        message["From"] = email  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é email –≤–º–µ—Å—Ç–æ EMAIL

        message["To"] = recipient  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é recipient
        message["Subject"] = subject

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞
        message.attach(MIMEText(body, "html"))

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º SMTP-—Å–µ—Ä–≤–µ—Ä –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ –í–°–ï –í –î–ï–õ–û –Ω—É–∂–Ω–æ —Å–º–æ—Ç—Ä–µ—Ç—å —Å –∫–∞–∫–æ–π –±—É–∫–≤—ã –º–∞–ª–µ–Ω—å–∫–∞—è, –±–æ–ª—å—à–∞—è, —ç—Ç–æ –≤–∞–∂–Ω–æ
        with smtplib.SMTP_SSL("smtp.gmail.com", 465) as server:
            server.login(email, password)
            server.sendmail(email, recipient, message.as_string())
        print("Email —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞: {e}")


# –§—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –º–µ–Ω—é
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    user_id = update.effective_user.id
    if user_id not in subscribers:
        subscribers.append(user_id)
        save_subscribers()

    keyboard = [
        [InlineKeyboardButton("–ó–∞–≥–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è", callback_data="info")],
        [InlineKeyboardButton("–ó–≤—ñ—Ç–Ω—ñ—Å—Ç—å –¥–ª—è –§–û–ü", callback_data="reports")],
        [InlineKeyboardButton("–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø–æ–¥–∞—Ç–∫—ñ–≤", callback_data="taxes")],
        [InlineKeyboardButton("–Ø–∫ –≤–µ—Å—Ç–∏ –æ–±–ª—ñ–∫?", callback_data="accounting")],
        [InlineKeyboardButton("üåü–ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø—Ä–æ—Å —ñ –í–∞—à—ñ –ø–∏—Ç–∞–Ω–Ω—è ", callback_data="unswer_question")],
        [InlineKeyboardButton("–î–æ–ø–æ–º–æ–≥–∞", callback_data="help")],

    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        await update.callback_query.edit_message_text("–í–∏–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª:", reply_markup=reply_markup)
    elif update.message:
        await update.message.reply_text("–í–∏–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª:", reply_markup=reply_markup)


# –§—É–Ω–∫—Ü–∏—è –∞–¥–º–∏–Ω-–º–µ–Ω—é
# –§—É–Ω–∫—Ü–∏—è –ø–æ–º–æ—â–∏
async def help_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üìö –©–æ —Ç–∞–∫–µ –§–û–ü?", callback_data="help_what_is_fop")],
        [InlineKeyboardButton("üìö –Ø–∫ –∑–º—ñ–Ω–∏—Ç–∏ —Å–∏—Å—Ç–µ–º—É –æ–ø–æ–¥–∞—Ç–∫—É–≤–∞–Ω–Ω—è?", callback_data="help_change_system")],
        [InlineKeyboardButton("üìö –Ø–∫ –ø–æ–¥–∞—Ç–∏ –∑–≤—ñ—Ç–Ω—ñ—Å—Ç—å –¥–ª—è –§–û–ü?", callback_data="help_filing_reports")],
        [InlineKeyboardButton("üìö –Ø–∫ —Ä–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –ø–æ–¥–∞—Ç–∫–∏?", callback_data="help_calculate_taxes")],
        [InlineKeyboardButton("üìö –Ø–∫ –≤–µ—Å—Ç–∏ –æ–±–ª—ñ–∫?", callback_data="help_accounting")],
        [InlineKeyboardButton("üîç –ó–Ω–∞–π—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å", callback_data="help_search")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data="main_menu")],
    ]
    await update.callback_query.edit_message_text(
        "–û–±–∏—Ä—ñ—Ç—å –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –ø–æ—à—É–∫–æ–º:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    # –ó–∞–≥–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
    if data == "info":
        keyboard = [
            [InlineKeyboardButton("–©–æ —Ç–∞–∫–µ –§–û–ü?", callback_data="info_what")],
            [InlineKeyboardButton("–ì—Ä—É–ø–∏ —Ç–∞ —Å–∏—Å—Ç–µ–º–∏ –æ–ø–æ–¥–∞—Ç–∫—É–≤–∞–Ω–Ω—è", callback_data="info_groups")],
            [InlineKeyboardButton("–Ø–∫ –∑–º—ñ–Ω–∏—Ç–∏ —Å–∏—Å—Ç–µ–º—É?", callback_data="info_change")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data="main_menu")],
        ]
        await query.edit_message_text("–ó–∞–≥–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:", reply_markup=InlineKeyboardMarkup(keyboard))
    elif data == "info_what":
        keyboard = [
            [InlineKeyboardButton("‚¨ÖÔ∏è –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data="main_menu")],
        ]
        await query.edit_message_text(
            "–§–û–ü ‚Äì —Ü–µ —Ñ—ñ–∑–∏—á–Ω–∞ –æ—Å–æ–±–∞-–ø—ñ–¥–ø—Ä–∏—î–º–µ—Ü—å, —è–∫–∞ –≤–µ–¥–µ –±—ñ–∑–Ω–µ—Å –±–µ–∑ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —é—Ä–∏–¥–∏—á–Ω–æ—ó –æ—Å–æ–±–∏.",
            reply_markup=InlineKeyboardMarkup(keyboard))
    elif data == "info_groups":
        keyboard = [
            [InlineKeyboardButton("‚¨ÖÔ∏è –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data="main_menu")],
        ]
        await query.edit_message_text(
            "1 –≥—Ä—É–ø–∞ ‚Äì –º–∞–ª–∏–π –±—ñ–∑–Ω–µ—Å. 2 –≥—Ä—É–ø–∞ ‚Äì –ø–æ—Å–ª—É–≥–∏ –¥–ª—è –Ω–∞—Å–µ–ª–µ–Ω–Ω—è/–§–û–ü. 3 –≥—Ä—É–ø–∞ ‚Äì —à–∏—Ä—à—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ, –≤–∫–ª—é—á–∞—é—á–∏ —Ä–æ–±–æ—Ç—É –∑ –ù–î–°.",
            reply_markup=InlineKeyboardMarkup(keyboard))
    elif data == "info_change":
        keyboard = [
            [InlineKeyboardButton("‚¨ÖÔ∏è –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data="main_menu")],
        ]
        await query.edit_message_text(
            "–©–æ–± –∑–º—ñ–Ω–∏—Ç–∏ —Å–∏—Å—Ç–µ–º—É –æ–ø–æ–¥–∞—Ç–∫—É–≤–∞–Ω–Ω—è, –ø–æ–¥–∞–π—Ç–µ –∑–∞—è–≤—É –¥–æ –ø–æ–¥–∞—Ç–∫–æ–≤–æ—ó –¥–æ –∫—ñ–Ω—Ü—è –∫–≤–∞—Ä—Ç–∞–ª—É.",
            reply_markup=InlineKeyboardMarkup(keyboard))

    elif data == "reports":
        keyboard = [
            [InlineKeyboardButton("1 –≥—Ä—É–ø–∞", callback_data="reports_group1")],
            [InlineKeyboardButton("2 –≥—Ä—É–ø–∞", callback_data="reports_group2")],
            [InlineKeyboardButton("3 –≥—Ä—É–ø–∞", callback_data="reports_group3")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")],
        ]
        await query.edit_message_text("–û–±–µ—Ä—ñ—Ç—å –≥—Ä—É–ø—É –¥–ª—è –∑–≤—ñ—Ç–Ω–æ—Å—Ç—ñ:", reply_markup=InlineKeyboardMarkup(keyboard))
    elif data == "reports_group1":
        keyboard = [
            [InlineKeyboardButton("‚¨ÖÔ∏è –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data="main_menu")],
        ]
        await query.edit_message_text(
            "–ó–≤—ñ—Ç–Ω—ñ—Å—Ç—å –¥–ª—è 1 –≥—Ä—É–ø–∏ –§–û–ü:\n"
            "- –ü–æ–¥–∞–Ω–Ω—è –¥–µ–∫–ª–∞—Ä–∞—Ü—ñ—ó —Ä–∞–∑ –Ω–∞ —Ä—ñ–∫ (–¥–æ 1 –±–µ—Ä–µ–∑–Ω—è).\n"
            "- –°–ø–ª–∞—Ç–∞ –Ñ–°–í –¥–æ 20 —Å—ñ—á–Ω—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–æ–∫—É.\n"
            "- –ü–æ–¥–∞—á–∞ –∫–Ω–∏–≥–∏ –æ–±–ª—ñ–∫—É –¥–æ—Ö–æ–¥—ñ–≤ –∑–∞ –±–∞–∂–∞–Ω–Ω—è–º.", reply_markup=InlineKeyboardMarkup(keyboard))


    elif data == "reports_group2":
        keyboard = [
            [InlineKeyboardButton("‚¨ÖÔ∏è –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data="main_menu")],
        ]
        await query.edit_message_text(
            "–ó–≤—ñ—Ç–Ω—ñ—Å—Ç—å –¥–ª—è 2 –≥—Ä—É–ø–∏ –§–û–ü:\n"
            "- –ü–æ–¥–∞–Ω–Ω—è –¥–µ–∫–ª–∞—Ä–∞—Ü—ñ—ó —Ä–∞–∑ –Ω–∞ —Ä—ñ–∫ (–¥–æ 1 –±–µ—Ä–µ–∑–Ω—è).\n"
            "- –°–ø–ª–∞—Ç–∞ –Ñ–°–í –¥–æ 20 —Å—ñ—á–Ω—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–æ–∫—É.\n"
            "- –ü–æ–¥–∞—á–∞ –∫–Ω–∏–≥–∏ –æ–±–ª—ñ–∫—É –¥–æ—Ö–æ–¥—ñ–≤ –∑–∞ –±–∞–∂–∞–Ω–Ω—è–º.", reply_markup=InlineKeyboardMarkup(keyboard))

    elif data == "reports_group3":
        keyboard = [
            [InlineKeyboardButton("‚¨ÖÔ∏è –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data="main_menu")],
        ]
        await query.edit_message_text(
            "–ó–≤—ñ—Ç–Ω—ñ—Å—Ç—å –¥–ª—è 3 –≥—Ä—É–ø–∏ –§–û–ü:\n"
            "- –î–µ–∫–ª–∞—Ä–∞—Ü—ñ—è –ø–æ–¥–∞—î—Ç—å—Å—è —â–æ–∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ.\n"
            "- –ü—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –ø–ª–∞—Ç–Ω–∏–∫–æ–º –ü–î–í –∑–≤—ñ—Ç–Ω—ñ—Å—Ç—å –ø–æ–¥–∞—î—Ç—å—Å—è —â–æ–º—ñ—Å—è—Ü—è.\n"
            "- –°–ø–ª–∞—Ç–∞ –Ñ–°–í –¥–æ 20 —á–∏—Å–ª–∞ –º—ñ—Å—è—Ü—è, –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∑–∞ –∫–≤–∞—Ä—Ç–∞–ª–æ–º.", reply_markup=InlineKeyboardMarkup(keyboard))

        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø–æ–¥–∞—Ç–∫—ñ–≤
    if data == "taxes":
        keyboard = [
            [InlineKeyboardButton("1 –≥—Ä—É–ø–∞", callback_data="taxes_group1")],
            [InlineKeyboardButton("2 –≥—Ä—É–ø–∞", callback_data="taxes_group2")],
            [InlineKeyboardButton("3 –≥—Ä—É–ø–∞", callback_data="taxes_group3")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")],
        ]
        await query.edit_message_text("–û–±–µ—Ä—ñ—Ç—å –≥—Ä—É–ø—É –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –ø–æ–¥–∞—Ç–∫—ñ–≤:",
                                      reply_markup=InlineKeyboardMarkup(keyboard))
    elif data == "taxes_group1":
        keyboard = [
            [InlineKeyboardButton("‚¨ÖÔ∏è –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data="main_menu")],
        ]
        await query.edit_message_text(
            "–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø–æ–¥–∞—Ç–∫—ñ–≤ –¥–ª—è 1 –≥—Ä—É–ø–∏ –§–û–ü:\n"
            "- –Ñ–¥–∏–Ω–∏–π –ø–æ–¥–∞—Ç–æ–∫: –¥–æ 10% –≤—ñ–¥ –ø—Ä–æ–∂–∏—Ç–∫–æ–≤–æ–≥–æ –º—ñ–Ω—ñ–º—É–º—É —Å—Ç–∞–Ω–æ–º –Ω–∞ 1 —Å—ñ—á–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ä–æ–∫—É.\n"
            "- –Ñ–°–í (—î–¥–∏–Ω–∏–π —Å–æ—Ü—ñ–∞–ª—å–Ω–∏–π –≤–Ω–µ—Å–æ–∫): 22% –≤—ñ–¥ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—ó –∑–∞—Ä–æ–±—ñ—Ç–Ω–æ—ó –ø–ª–∞—Ç–∏ —Å—Ç–∞–Ω–æ–º –Ω–∞ 1 —Å—ñ—á–Ω—è.",
            reply_markup=InlineKeyboardMarkup(keyboard))

    elif data == "taxes_group2":
        keyboard = [
            [InlineKeyboardButton("‚¨ÖÔ∏è –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data="main_menu")],
        ]
        await query.edit_message_text(
            "–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø–æ–¥–∞—Ç–∫—ñ–≤ –¥–ª—è 2 –≥—Ä—É–ø–∏ –§–û–ü:\n"
            "- –Ñ–¥–∏–Ω–∏–π –ø–æ–¥–∞—Ç–æ–∫: –¥–æ 20% –≤—ñ–¥ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—ó –∑–∞—Ä–æ–±—ñ—Ç–Ω–æ—ó –ø–ª–∞—Ç–∏ —Å—Ç–∞–Ω–æ–º –Ω–∞ 1 —Å—ñ—á–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ä–æ–∫—É.\n"
            "- –Ñ–°–í (—î–¥–∏–Ω–∏–π —Å–æ—Ü—ñ–∞–ª—å–Ω–∏–π –≤–Ω–µ—Å–æ–∫): 22% –≤—ñ–¥ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—ó –∑–∞—Ä–æ–±—ñ—Ç–Ω–æ—ó –ø–ª–∞—Ç–∏ —Å—Ç–∞–Ω–æ–º –Ω–∞ 1 —Å—ñ—á–Ω—è.",
            reply_markup=InlineKeyboardMarkup(keyboard))

    elif data == "taxes_group3":
        keyboard = [
            [InlineKeyboardButton("‚¨ÖÔ∏è –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data="main_menu")],
        ]
        await query.edit_message_text(
            "–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø–æ–¥–∞—Ç–∫—ñ–≤ –¥–ª—è 3 –≥—Ä—É–ø–∏ –§–û–ü:\n"
            "- –Ñ–¥–∏–Ω–∏–π –ø–æ–¥–∞—Ç–æ–∫ (–±–µ–∑ –ù–î–°): 5% –≤—ñ–¥ –¥–æ—Ö–æ–¥—É.\n"
            "- –Ñ–¥–∏–Ω–∏–π –ø–æ–¥–∞—Ç–æ–∫ (–∑ –ù–î–°): 3% –≤—ñ–¥ –¥–æ—Ö–æ–¥—É + –ü–î–í (20%).\n"
            "- –Ñ–°–í (—î–¥–∏–Ω–∏–π —Å–æ—Ü—ñ–∞–ª—å–Ω–∏–π –≤–Ω–µ—Å–æ–∫): 22% –≤—ñ–¥ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—ó –∑–∞—Ä–æ–±—ñ—Ç–Ω–æ—ó –ø–ª–∞—Ç–∏ —Å—Ç–∞–Ω–æ–º –Ω–∞ 1 —Å—ñ—á–Ω—è.",
            reply_markup=InlineKeyboardMarkup(keyboard))

        # –Ø–∫ –≤–µ—Å—Ç–∏ –æ–±–ª—ñ–∫?
    if data == "accounting":
        keyboard = [
            [InlineKeyboardButton("–ö–Ω–∏–≥–∞ –æ–±–ª—ñ–∫—É –¥–æ—Ö–æ–¥—ñ–≤", callback_data="accounting_book")],
            [InlineKeyboardButton("–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è –æ–±–ª—ñ–∫—É", callback_data="accounting_automation")],
            [InlineKeyboardButton("–ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤", callback_data="accounting_documents")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data="main_menu")],
        ]
        await query.edit_message_text("–û–±–µ—Ä—ñ—Ç—å –∞—Å–ø–µ–∫—Ç –æ–±–ª—ñ–∫—É:", reply_markup=InlineKeyboardMarkup(keyboard))
    elif data == "accounting_book":
        keyboard = [
            [InlineKeyboardButton("‚¨ÖÔ∏è –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data="main_menu")],
        ]
        await query.edit_message_text(
            "–ö–Ω–∏–≥–∞ –æ–±–ª—ñ–∫—É –¥–æ—Ö–æ–¥—ñ–≤:\n"
            "- –î–ª—è 1 —ñ 2 –≥—Ä—É–ø –æ–±–æ–≤'—è–∑–∫–æ–≤–æ—é —î –∫–Ω–∏–≥–∞ –æ–±–ª—ñ–∫—É –¥–æ—Ö–æ–¥—ñ–≤.\n"
            "- –ó–∞–ø–∏—Å–∏ –≤–µ–¥—É—Ç—å—Å—è —â–æ–¥–Ω—è, —Ñ—ñ–∫—Å—É—é—Ç—å—Å—è —Å—É–º–∏ –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –¥–æ—Ö–æ–¥—ñ–≤.\n"
            "- –ö–Ω–∏–≥—É –º–æ–∂–Ω–∞ –≤–µ—Å—Ç–∏ —è–∫ —É –ø–∞–ø–µ—Ä–æ–≤—ñ–π, —Ç–∞–∫ —ñ –≤ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ñ–π —Ñ–æ—Ä–º—ñ.",
            reply_markup=InlineKeyboardMarkup(keyboard))

    elif data == "accounting_automation":
        keyboard = [
            [InlineKeyboardButton("‚¨ÖÔ∏è –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data="main_menu")],
        ]
        await query.edit_message_text(
            "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è –æ–±–ª—ñ–∫—É:\n"
            "- –î–ª—è –æ–±–ª—ñ–∫—É –¥–æ—Ö–æ–¥—ñ–≤ —Ç–∞ –≤–∏—Ç—Ä–∞—Ç –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–∏: –ü—Ä–∏–≤–∞—Ç24, Liga:REPORT, –ú–ï–î–û–ö.\n"
            "- –ü—Ä–æ–≥—Ä–∞–º–∏ –¥–æ–ø–æ–º–∞–≥–∞—é—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑—É–≤–∞—Ç–∏ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–∏ –ø–æ–¥–∞—Ç–∫—ñ–≤, —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤—ñ—Ç—ñ–≤.",
            reply_markup=InlineKeyboardMarkup(keyboard))

    elif data == "accounting_documents":
        keyboard = [
            [InlineKeyboardButton("‚¨ÖÔ∏è –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data="main_menu")],
        ]
        await query.edit_message_text(
            "–ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤:\n"
            "- –ó–±–µ—Ä—ñ–≥–∞–π—Ç–µ –∫–æ–ø—ñ—ó –≤—Å—ñ—Ö –¥–æ–≥–æ–≤–æ—Ä—ñ–≤, –∫–≤–∏—Ç–∞–Ω—Ü—ñ–π, –∞–∫—Ç—ñ–≤ –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö —Ä–æ–±—ñ—Ç.\n"
            "- –†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ö–º–∞—Ä–Ω—ñ —Å–µ—Ä–≤—ñ—Å–∏ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤.",
            reply_markup=InlineKeyboardMarkup(keyboard))

    if data == "main_menu":
        await start(update, context)
    elif data == "help":
        await help_menu(update, context)
    elif data == "help_search":
        await query.edit_message_text(
            "–í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è —É —á–∞—Ç, —ñ –±–æ—Ç —Å–ø—Ä–æ–±—É—î –∑–Ω–∞–π—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å.",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚¨ÖÔ∏è –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data="main_menu")]])
        )
        context.user_data["awaiting_question"] = True

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    if data == "help_what_is_fop":
        await query.edit_message_text(
            "–§–û–ü ‚Äì —Ü–µ —Ñ—ñ–∑–∏—á–Ω–∞ –æ—Å–æ–±–∞-–ø—ñ–¥–ø—Ä–∏—î–º–µ—Ü—å, —è–∫–∞ –≤–µ–¥–µ –±—ñ–∑–Ω–µ—Å –±–µ–∑ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —é—Ä–∏–¥–∏—á–Ω–æ—ó –æ—Å–æ–±–∏.",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚¨ÖÔ∏è –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data="main_menu")]])
        )
    elif data == "help_change_system":
        await query.edit_message_text(
            "–©–æ–± –∑–º—ñ–Ω–∏—Ç–∏ —Å–∏—Å—Ç–µ–º—É –æ–ø–æ–¥–∞—Ç–∫—É–≤–∞–Ω–Ω—è, –ø–æ–¥–∞–π—Ç–µ –∑–∞—è–≤—É –¥–æ –ø–æ–¥–∞—Ç–∫–æ–≤–æ—ó –¥–æ –∫—ñ–Ω—Ü—è –∫–≤–∞—Ä—Ç–∞–ª—É.",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚¨ÖÔ∏è –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data="main_menu")]])
        )
    elif data == "help_filing_reports":
        await query.edit_message_text(
            "–ó–≤—ñ—Ç–Ω—ñ—Å—Ç—å –¥–ª—è –§–û–ü –ø–æ–¥–∞—î—Ç—å—Å—è –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –≥—Ä—É–ø–∏. –û–±–µ—Ä—ñ—Ç—å '–ó–≤—ñ—Ç–Ω—ñ—Å—Ç—å –¥–ª—è –§–û–ü' –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚¨ÖÔ∏è –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data="main_menu")]])
        )
    elif data == "help_calculate_taxes":
        await query.edit_message_text(
            "–ü–æ–¥–∞—Ç–∫–∏ —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—é—Ç—å—Å—è –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –≥—Ä—É–ø–∏ —Ç–∞ —Å–∏—Å—Ç–µ–º–∏. –ü–µ—Ä–µ–π–¥—ñ—Ç—å –¥–æ '–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø–æ–¥–∞—Ç–∫—ñ–≤' –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚¨ÖÔ∏è –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data="main_menu")]])
        )
    elif data == "help_accounting":
        await query.edit_message_text(
            "–î–ª—è –≤–µ–¥–µ–Ω–Ω—è –æ–±–ª—ñ–∫—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–∏–≥—É –æ–±–ª—ñ–∫—É –¥–æ—Ö–æ–¥—ñ–≤ –∞–±–æ —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –ø—Ä–æ–≥—Ä–∞–º–∏.",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚¨ÖÔ∏è –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data="main_menu")]])
        )
    if data == "unswer_question":
        keyboard = [
            [InlineKeyboardButton("‚¨ÖÔ∏è –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data="main_menu")],
        ]
        context.user_data["answer_question"] = "group_question"
        await query.edit_message_text("–Ø–∫–∞ —É –í–∞—Å –≥—Ä—É–ø–∞ –ø—ñ–¥–ø—Ä–∏—î–º–Ω–∏—Ü—å–∫–æ—ó –¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ? ",
                                      reply_markup=InlineKeyboardMarkup(keyboard))


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ü–µ–ø–æ—á–∫–µ
    if context.user_data.get("answer_question"):
        keyboard = [
            [InlineKeyboardButton("‚¨ÖÔ∏è –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data="main_menu")],
        ]
        if context.user_data["answer_question"] == "group_question":
            context.user_data["group"] = user_message
            context.user_data["answer_question"] = "tax_system_question"
            await update.message.reply_text("–Ø–∫—É –º–∞—î—Ç–µ —Å–∏—Å—Ç–µ–º—É –æ–ø–æ–¥–∞—Ç–∫—É–≤–∞–Ω–Ω—è?",
                                            reply_markup=InlineKeyboardMarkup(keyboard))
        elif context.user_data["answer_question"] == "tax_system_question":
            keyboard = [
                [InlineKeyboardButton("‚¨ÖÔ∏è –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data="main_menu")],
            ]
            context.user_data["tax_system"] = user_message
            context.user_data["answer_question"] = "contact_question"
            await update.message.reply_text(
                "–í–≤–µ–¥—ñ—Ç—å –í–∞—à—ñ –∫–æ–Ω—Ç. –¥–∞–Ω–Ω—ñ: —ñ–º‚Äô—è, —Ç–µ–ª., –µ–ª–µ–∫—Ç—Ä. –∞–¥—Ä–µ—Å–∞., —Ç–∞ –í–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è, —è–∫–µ –º–∞—î—Ç–µ –¥–æ –Ω–∞—Å, —á–∏  –Ω–∞ —è–∫–µ –Ω–µ –∑–Ω–∞–π—à–ª–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å",
                reply_markup=InlineKeyboardMarkup(keyboard))
        elif context.user_data["answer_question"] == "contact_question":
            keyboard = [
                [InlineKeyboardButton("‚¨ÖÔ∏è –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data="main_menu")],
            ]

            context.user_data["contact_info"] = user_message
            context.user_data["answer_question"] = None
            await update.message.reply_text(
                "–î—è–∫—É—é –∑–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ!–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —â–µ —Ä–∞–∑ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω–Ω—ñ. –ú–∏ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –æ–ø—Ä–∞—Ü—é—î–º–æ –í–∞—à—ñ –¥–∞–Ω–Ω—ñ —ñ –≤–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è! –û—Å—å –≤–∞—à—ñ –¥–∞–Ω—ñ —ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è:\n"
                f"–ì—Ä—É–ø–∞: {context.user_data['group']}\n"
                f"–°–∏—Å—Ç–µ–º–∞ –æ–ø–æ–¥–∞—Ç–∫—É–≤–∞–Ω–Ω—è: {context.user_data['tax_system']}\n"
                f"–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω–Ω—ñ —Ç–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è: {context.user_data['contact_info']}"
                , reply_markup=InlineKeyboardMarkup(keyboard))
        # return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        confirmation_messag = (
            "–î—è–∫—É—é –∑–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ!–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —â–µ —Ä–∞–∑ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω–Ω—ñ. –ú–∏ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –æ–ø—Ä–∞—Ü—é—î–º–æ –í–∞—à—ñ –¥–∞–Ω–Ω—ñ —ñ –∑ –í–∞–º–∏ –∑–≤'—è–∂–∏–º–æ—Å—å! –û—Å—å –≤–∞—à—ñ –¥–∞–Ω—ñ:\n"
            f"–ì—Ä—É–ø–∞: {context.user_data['group']}\n"
            f"–°–∏—Å—Ç–µ–º–∞ –æ–ø–æ–¥–∞—Ç–∫—É–≤–∞–Ω–Ω—è: {context.user_data['tax_system']}\n"
            f"–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω–Ω—ñ: {context.user_data['contact_info']}"
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ email
        email_subject = "–ù–æ–≤—ñ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞"
        send_email(email_subject, confirmation_messag)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    if context.user_data.get("awaiting_question"):
        question = user_message.lower()
        if "—Ñ–æ–ø" in question:
            keyboard = [
                [InlineKeyboardButton("‚¨ÖÔ∏è –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data="main_menu")],
            ]
            await update.message.reply_text(
                "–§–û–ü ‚Äì —Ü–µ —Ñ—ñ–∑–∏—á–Ω–∞ –æ—Å–æ–±–∞-–ø—ñ–¥–ø—Ä–∏—î–º–µ—Ü—å, —è–∫–∞ –≤–µ–¥–µ –±—ñ–∑–Ω–µ—Å –±–µ–∑ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —é—Ä–∏–¥–∏—á–Ω–æ—ó –æ—Å–æ–±–∏.–ñ–¥—É –∑ –Ω–µ—Ç–µ—Ä–ø—ñ–Ω–Ω—è–º –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è!!!",
                reply_markup=InlineKeyboardMarkup(keyboard))
        elif "—Å–∏—Å—Ç–µ–º–∞" in question:
            keyboard = [
                [InlineKeyboardButton("‚¨ÖÔ∏è –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data="main_menu")],
            ]
            await update.message.reply_text(
                "–©–æ–± –∑–º—ñ–Ω–∏—Ç–∏ —Å–∏—Å—Ç–µ–º—É –æ–ø–æ–¥–∞—Ç–∫—É–≤–∞–Ω–Ω—è, –ø–æ–¥–∞–π—Ç–µ –∑–∞—è–≤—É –¥–æ –ø–æ–¥–∞—Ç–∫–æ–≤–æ—ó –¥–æ –∫—ñ–Ω—Ü—è –∫–≤–∞—Ä—Ç–∞–ª—É.–ñ–¥—É –∑ –Ω–µ—Ç–µ—Ä–ø—ñ–Ω–Ω—è–º –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è!!!",
                reply_markup=InlineKeyboardMarkup(keyboard))
        elif "–∑–≤—ñ—Ç–Ω—ñ—Å—Ç—å" in question:
            keyboard = [
                [InlineKeyboardButton("‚¨ÖÔ∏è –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data="main_menu")],
            ]
            await update.message.reply_text(
                "–ó–≤—ñ—Ç–Ω—ñ—Å—Ç—å –¥–ª—è –§–û–ü –ø–æ–¥–∞—î—Ç—å—Å—è –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –≥—Ä—É–ø–∏. –û–±–µ—Ä—ñ—Ç—å '–ó–≤—ñ—Ç–Ω—ñ—Å—Ç—å –¥–ª—è –§–û–ü' –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.–ñ–¥—É –∑ –Ω–µ—Ç–µ—Ä–ø—ñ–Ω–Ω—è–º –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è!!!",
                reply_markup=InlineKeyboardMarkup(keyboard))
        elif "–ø–æ–¥–∞—Ç–∫–∏" in question:
            keyboard = [
                [InlineKeyboardButton("‚¨ÖÔ∏è –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data="main_menu")],
            ]
            await update.message.reply_text(
                "–ü–æ–¥–∞—Ç–∫–∏ —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—é—Ç—å—Å—è –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –≥—Ä—É–ø–∏ —Ç–∞ —Å–∏—Å—Ç–µ–º–∏. –ü–µ—Ä–µ–π–¥—ñ—Ç—å –¥–æ '–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø–æ–¥–∞—Ç–∫—ñ–≤' –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.–ñ–¥—É –∑ –Ω–µ—Ç–µ—Ä–ø—ñ–Ω–Ω—è–º –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è!!!",
                reply_markup=InlineKeyboardMarkup(keyboard))
        elif "–æ–±–ª—ñ–∫" in question:
            keyboard = [
                [InlineKeyboardButton("‚¨ÖÔ∏è –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data="main_menu")],
            ]
            await update.message.reply_text(
                "–î–ª—è –≤–µ–¥–µ–Ω–Ω—è –æ–±–ª—ñ–∫—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–∏–≥—É –æ–±–ª—ñ–∫—É –¥–æ—Ö–æ–¥—ñ–≤ –∞–±–æ —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –ø—Ä–æ–≥—Ä–∞–º–∏.–ñ–¥—É –∑ –Ω–µ—Ç–µ—Ä–ø—ñ–Ω–Ω—è–º –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è!!!",
                reply_markup=InlineKeyboardMarkup(keyboard))
        else:
            keyboard = [
                [InlineKeyboardButton("‚¨ÖÔ∏è –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data="main_menu")],
            ]

            await update.message.reply_text(
                "–Ø–∫—â–æ –≤–∏ –Ω–µ –º–∞—î—Ç–µ –¥–æ –Ω–∞—Å –ø–∏—Ç–∞–Ω—å, —á–∏ –≤–∂–µ –≤—ñ–¥–ø—Ä–∞–≤–∏–ª–∏ –π–æ–≥–æ –Ω–∞ —Ä–æ–∑–≥–ª—è–¥, —Ç–æ —ñ–≥–Ω–æ—Ä—É–π—Ç–µ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è! –∞ —è–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è —ñ –Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–ª—è–ª–∏ –π–æ–≥–æ , —Ç–æ –ú–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é , –¥–∞–ª—ñ —É –º–µ–Ω—é (–ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø—Ä–æ—Å —ñ –í–∞—à—ñ –ø–∏—Ç–∞–Ω–Ω—è), –ó–∞–ø–æ–≤–Ω—ñ—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ, —ñ –Ω–∞–ø–∏—à–∏—Ç—å –í–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è, –º–∏ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –π–æ–≥–æ –æ–ø—Ä–∞—Ü—é—î–º–æ —ñ –¥–∞–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )

            context.user_data["awaiting_email"] = True
            context.user_data["awaiting_question"] = False
        return
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ email
    if context.user_data.get("awaiting_email"):
        keyboard = [
            [InlineKeyboardButton("‚¨ÖÔ∏è –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data="main_menu")],
        ]
        email_address = user_message
        context.user_data["email_address"] = email_address

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

        email_subject = "–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞"
        message = (
            "–ù–∞ –∂–∞–ª—å, —è –Ω–µ –∑–Ω–∞–π—à–æ–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è. –í–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è –º–∏ –æ–ø—Ä–∞—Ü—é—î–º–æ —ñ –≤—ñ–¥–ø—Ä–∞–≤–∏–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å.\n\n"
            f"–û—Å—å –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è:\n"
            f"–ü–∏—Ç–∞–Ω–Ω—è: {context.user_data.get('last_question', '–ù–µ–≤—ñ–¥–æ–º–µ')}\n"
            f"–ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –∞–¥—Ä–µ—Å–∞: {email_address}\n"
        )

        await update.message.reply_text("–ü–µ—Ä–µ–π–¥—ñ—Ç—å —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é —Ç–∞ –∑–∞–¥–∞–π—Ç–µ –í–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è. –î—è–∫—É—é!",
                                        reply_markup=InlineKeyboardMarkup(keyboard))
        context.user_data["awaiting_email"] = False
        context.user_data["awaiting_question"] = True

        return


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram Bot
application = Application.builder().token(TOKEN).build()

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
application.add_handler(CommandHandler("start", start))
application.add_handler(CallbackQueryHandler(button_handler))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–æ–≤
@app.route('/webhook', methods=['POST'])
def webhook():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram."""
    data = request.json
    update = Update.de_json(data, application.bot)
    application.update_queue.put_nowait(update)
    return "OK", 200

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞
@app.route('/set_webhook', methods=['GET'])
def set_webhook():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–µ–±—Ö—É–∫ –¥–ª—è –±–æ—Ç–∞."""
    response = application.bot.set_webhook(WEBHOOK_URL)
    if response:
        return f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}", 200
    return "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook", 400

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
@app.route('/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    return "OK", 200

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    load_subscribers()
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))



